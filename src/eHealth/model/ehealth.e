note
	description: "EHEALTH business model. Skeleton generated by ETF (author: Jackie Wang)."
	author: "Siraj Rauff"
	date: "$Date$"
	revision: "$Revision$"

class
	EHEALTH

inherit
	ANY
		redefine
			out
		end

create {EHEALTH_ACCESS}
	make

feature {NONE} -- Initialization
	make -- Initialization for `Current'.
		do
			i := 0
			state := [0,0,0]
			create message.make_ok
			create physicians.make
			create patients.make
			create medications.make
			create interactions.make
			create prescriptions.make
			create constraints
		end

feature -- model attributes
	i : INTEGER
	state : TUPLE[command : INTEGER ; report_type : INTEGER ; medication : INTEGER]
	message : STATUS_MESSAGE
	physicians : PHYSICIANS
	patients : PATIENTS
	medications : MEDICATIONS
	interactions : INTERACTIONS
	prescriptions : PRESCRIPTIONS
	constraints : ETF_TYPE_CONSTRAINTS

feature -- model operations

	set_message(m: STATUS_MESSAGE)
		do
			message := m
		end

	default_update -- Perform update to the model state.
		do
			i := i + 1
		end

	reset -- Reset model state.
		do
			make
		end

feature -- commands
	add_interaction(id1: INTEGER; id2: INTEGER)
	require
		not_negative: id1 > 0 and id2 > 0
		ids_not_same: not (id1 = id2)
		medications_exist: medication_exists(id1) and medication_exists(id2)
		interaction_not_exists: not interaction_exists(id1,id2)
		-- First remove conflicint medicine prescribed by generalist
	do
		interactions.add_interaction(id1,id2)
	ensure
		interaction_added: interactions.interaction_exists(id1,id2)
	end

	add_medication(id: INTEGER ; medicine: TUPLE[name: STRING; kind: INTEGER; low: VALUE; hi: VALUE])
	require
		not_negative: id > 0
		not_already_exists: not medication_exists(id)
		valid_string: is_valid_string (medicine.name)
		name_not_used: not medication_name_used(medicine.name)
		valid_range: 0.0 < medicine.low and medicine.low <= medicine.hi
	do
		medications.add_medication(id, medicine)
	ensure
		medication_added: medication_exists(id) and
			medication_name_used(medicine.name)
	end

	add_medicine(id: INTEGER ; medicine: INTEGER ; dose: VALUE)
	require
		not_negative: id > 0 and medicine > 0 and dose > 0.0
		registered: prescription_id_used(id) and medication_exists(medicine)
		not_prescribed: not medicine_prescribed(id, medicine)
		valid_dose: valid_dose(medicine, dose)
	do
		prescriptions.add_medicine(id, medicine, dose)
	ensure
		prescribed: medicine_prescribed(id, medicine)
	end

	add_patient(id: INTEGER ; name: STRING)
	require
		not_negative: id > 0
		valid_name: is_valid_string (name)
		not_exists: not patient_exists (id)
	do
		patients.add_patient (id, name)
	ensure
		patient_added: patient_exists(id)
	end

	add_physician(id: INTEGER ; name: STRING ; kind: INTEGER)
	require
		not_negative: id > 0
		valid_name: is_valid_string (name)
		not_exists: not physician_exists (id)
	do
		physicians.add_physician (id, name, kind)
	ensure
		physician_added: physician_exists(id)
	end

	new_prescription(id: INTEGER ; doctor: INTEGER ; patient: INTEGER)
	require
		not_negative: id > 0 and doctor > 0 and patient > 0
		id_not_used: not prescription_id_used (id)
		registered: physician_exists (doctor) and patient_exists (patient)
		not_exists: not prescription_exists (doctor,patient)
	do
		prescriptions.new_prescription(id, doctor, patient)
	ensure
		added: prescription_id_used(id) and prescription_exists(doctor, patient)
	end

	remove_medicine(id: INTEGER ; medicine: INTEGER)
	require
		not_negative: id > 0 and medicine > 0
		registered: prescription_id_used (id) and medications.medication_exists (medicine)
		prescribed: medicine_prescribed(id, medicine)
	do
		prescriptions.remove_medicine(id, medicine)
	ensure
		removed: not medicine_prescribed(id, medicine)
	end

feature -- queries
	dpr_q
	do
		state.command := 1
		state.report_type := 1
	end

	prescriptions_q(medication_id: INTEGER)
	do
		state.command := 1
		state.report_type := 2
		state.medication := medication_id
	end

feature -- queries [GENERAL]

	out : STRING
		do
			create Result.make_empty
			if state.command = 0 then
				Result := "  " + i.out + ": " + message.out
					+ "%N  Physicians:" + physicians.physicians_output
					+ "%N  Patients: " + patients.patients_output
					+ "%N  Medications: " + medications.medications_output
					+ "%N  Interactions: " + interactions.interactions_output
					+ "%N  Prescriptions:" + prescriptions.prescriptions_output

			elseif state.command = 1 then
				if state.report_type = 1 then
					Result := "  " + i.out + ": " + message.out
						+ prescriptions.dangerous_prescriptions

				elseif state.report_type = 2 then
					Result := "  " + i.out + ": " + message.out
						+ "%N  Output: medication is "
						+ medications.medication_info(state.medication)
						+ patients.patients_prescribed_medicine(state.medication)
				end
			end
			state := [0,0,0]
		end

feature -- Physicians Queries
	physician_exists(physician_id: INTEGER): BOOLEAN
		require
			not_negative: physician_id > 0
		do
			Result := physicians.physician_exists (physician_id)
		end

	physician_is_specialist(physician_id: INTEGER): BOOLEAN
		require
			not_negative: physician_id > 0
			regisetered: physician_exists(physician_id)
		do
			Result := physicians.physician_is_specialist(physician_id)
		end

feature	-- Patients Queries
	patient_exists(patient_id: INTEGER): BOOLEAN
		require
			not_negative: patient_id > 0
		do
			Result := patients.patient_exists (patient_id)
		end

	patients_prescribed_medicine(medication_id: INTEGER): STRING
		require
			not_negative: medication_id > 0
			registered: medication_exists(medication_id)
		do
			Result := patients.patients_prescribed_medicine(medication_id)
		end

	format_patient(patient_id: INTEGER):STRING
		require
			not_negative: patient_id > 0
			registered: patient_exists(patient_id)
		do
			Result := patients.format_patient(patient_id)
		end

feature -- Medication Queries
	medication_exists(medication_id: INTEGER): BOOLEAN
		require
			valid_id: medication_id > 0
		do
			Result := medications.medication_exists (medication_id)
		end

	medication_name_used(medication_name: STRING): BOOLEAN
		require
			valid_string: is_valid_string (medication_name)
		do
			Result := medications.medication_name_used(medication_name)
		end

	valid_dose(medication_id: INTEGER ; dose: VALUE): BOOLEAN
		require
			non_negative: medication_id > 0 and dose > 0.0
			registered: medication_exists (medication_id)
		do
			Result := medications.valid_dose(medication_id, dose)
		end

	medication_info(medication_id: INTEGER) : STRING
		require
			not_negative: medication_id > 0
			exists: medication_exists(medication_id)
		do
			Result := medications.medication_info(medication_id)
		end

	format_medication(medication_id: INTEGER) : STRING
		require
			not_negative: medication_id > 0
			exists: medication_exists(medication_id)
		do
			Result := medications.format_medication(medication_id)
		end

feature -- Interaction Queries
	interaction_exists(id1,id2: INTEGER): BOOLEAN
		require
			not_negative: id1 > 0 and id2 > 0
			registered: medication_exists(id1) and medication_exists(id2)
		do
			Result := interactions.interaction_exists(id1,id2)
		end

	patient_dangerous_interactions(patient_id: INTEGER): STRING
		require
			not_negative: patient_id > 0
			registered: patient_exists(patient_id)
		do
			Result := patient_dangerous_interactions(patient_id)
		end

	format_interactions(id1,id2: INTEGER): STRING
		require
			ids_positive: id1 > 0 and id2 > 0
			medications_exist: medication_exists(id1) and medication_exists(id2)
		do
			Result := format_interactions(id1,id2)
		end

feature -- Prescription Queries
	prescription_id_used(prescription_id: INTEGER): BOOLEAN
		require
			non_negative: prescription_id > 0
		do
			Result := prescriptions.prescription_id_used (prescription_id)
		end

	prescription_exists(doctor, patient: INTEGER): BOOLEAN
		require
			non_negative: doctor > 0 and patient > 0
			registered: physician_exists (doctor) and patient_exists(patient)
		do
			Result := prescriptions.prescription_exists(doctor, patient)
		end

	medicine_prescribed(prescription_id, medicine_id : INTEGER): BOOLEAN
		require
			not_negative: prescription_id > 0 and medicine_id > 0
			exists: prescription_id_used(prescription_id)
		do
			Result := prescriptions.medicine_prescribed(prescription_id, medicine_id)
		end

	patient_prescribed_medicine(patient_id, medicine_id : INTEGER): BOOLEAN
		require
			not_negative: patient_id > 0 and medicine_id > 0
			registered: patient_exists(patient_id) and medication_exists(medicine_id)
		do
			Result := prescriptions.patient_prescribed_medicine(patient_id, medicine_id)
		end

	patient_dangerous_prescription(patient_id: INTEGER): BOOLEAN
		require
			not_negative: patient_id > 0
			registered: patient_exists(patient_id)
		do
			Result := prescriptions.patient_dangerous_prescription(patient_id)
		end

	dangerous_prescriptions: STRING
		do
			Result := prescriptions.dangerous_prescriptions
		end

feature -- queries [TYPE]

	is_pill(kind: INTEGER) : BOOLEAN
		require
			constraints.is_kind (kind)
		do
			Result := "pill" ~ constraints.enum_items_inverse.at (kind)
		end

	is_liquid(kind: INTEGER) : BOOLEAN
		require
			constraints.is_kind (kind)
		do
			Result := "liquid" ~ constraints.enum_items_inverse.at (kind)
		end

	is_generalist(kind: INTEGER) : BOOLEAN
		require
			constraints.is_physician_type (kind)
		do
			Result := "generalist" ~ constraints.enum_items_inverse.at (kind)
		end

	is_specialist(kind: INTEGER) : BOOLEAN
		require
			constraints.is_physician_type (kind)
		do
			Result := "specialist" ~ constraints.enum_items_inverse.at (kind)
		end

feature {ANY} -- valid names

	is_valid_string(a_name:STRING): BOOLEAN
		do
			Result := a_name.count >= 1
			Result := Result
				and then is_ascii_character(a_name[1])
	ensure
			Result implies a_name.count >= 1
			Result implies is_ascii_character(a_name[1])
		end

	is_ascii_character(c: CHARACTER): BOOLEAN
		do
			Result := (65 <= c.code and c.code <= 90)
				or (97 <= c.code and c.code <= 172)
		ensure
			Result = (65 <= c.code and c.code <= 90)
				or (97 <= c.code and c.code <= 172)
		end

end
